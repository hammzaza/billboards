{
  "_from": "graphql-tag",
  "_id": "graphql-tag@2.9.1",
  "_inBundle": false,
  "_integrity": "sha512-JBLpagu/Xbb8N6xU6hZvBeHjdvnWb/GJnA/rrnBy3iSl0bcy+pjT5N1HctAsWNmGoAgY1+ilwv6JJqu0Tk2hHQ==",
  "_location": "/graphql-tag",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "graphql-tag",
    "fetchSpec": "latest",
    "name": "graphql-tag",
    "raw": "graphql-tag",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/graphql-tag/-/graphql-tag-2.9.1.tgz",
  "_shasum": "1ab090ef7d3518b06d8c97d1393672145fe91587",
  "_spec": "graphql-tag",
  "_where": "/home/hamzaa/Desktop/billboards",
  "author": "",
  "bugs": {
    "url": "https://github.com/apollostack/graphql-tag/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "A JavaScript template literal tag that parses GraphQL queries",
  "devDependencies": {
    "babel-preset-es2015": "^6.9.0",
    "babel-register": "^6.9.0",
    "chai": "^4.0.2",
    "graphql": "^0.13.0",
    "mocha": "^3.4.1",
    "rollup": "^0.45.0",
    "test-all-versions": "^3.3.2"
  },
  "homepage": "https://github.com/apollostack/graphql-tag#readme",
  "jsnext:main": "./src/index.js",
  "license": "MIT",
  "main": "./lib/graphql-tag.umd.js",
  "module": "./src/index.js",
  "name": "graphql-tag",
  "optionalDependencies": {},
  "peerDependencies": {
    "graphql": "^0.9.0 || ^0.10.0 || ^0.11.0 || ^0.12.0 || ^0.13.0"
  },
  "readme": "# graphql-tag\n[![npm version](https://badge.fury.io/js/graphql-tag.svg)](https://badge.fury.io/js/graphql-tag)\n[![Build Status](https://travis-ci.org/apollographql/graphql-tag.svg?branch=master)](https://travis-ci.org/apollographql/graphql-tag)\n[![Get on Slack](https://img.shields.io/badge/slack-join-orange.svg)](http://www.apollodata.com/#slack)\n\nHelpful utilities for parsing GraphQL queries. Includes:\n\n- `gql` A JavaScript template literal tag that parses GraphQL query strings into the standard GraphQL AST.\n- `/loader` A webpack loader to preprocess queries\n\n`graphql-tag` uses [the reference `graphql` library](https://github.com/graphql/graphql-js) under the hood as a peer dependency, so in addition to installing this module, you'll also have to install `graphql-js`.\n\n### gql\n\nThis is a template literal tag you can use to concisely write a GraphQL query that is parsed into the standard GraphQL AST:\n\n```js\nimport gql from 'graphql-tag';\n\nconst query = gql`\n  {\n    user(id: 5) {\n      firstName\n      lastName\n    }\n  }\n`\n\n// query is now a GraphQL syntax tree object\nconsole.log(query);\n\n// {\n//   \"kind\": \"Document\",\n//   \"definitions\": [\n//     {\n//       \"kind\": \"OperationDefinition\",\n//       \"operation\": \"query\",\n//       \"name\": null,\n//       \"variableDefinitions\": null,\n//       \"directives\": [],\n//       \"selectionSet\": {\n//         \"kind\": \"SelectionSet\",\n//         \"selections\": [\n//           {\n//             \"kind\": \"Field\",\n//             \"alias\": null,\n//             \"name\": {\n//               \"kind\": \"Name\",\n//               \"value\": \"user\",\n//               ...\n```\n\nYou can easily explore GraphQL ASTs on [astexplorer.net](https://astexplorer.net/#/drYr8X1rnP/1).\n\nThis package is the way to pass queries into [Apollo Client](https://github.com/apollostack/apollo-client). If you're building a GraphQL client, you can use it too!\n\n#### Why use this?\n\nGraphQL strings are the right way to write queries in your code, because they can be statically analyzed using tools like [eslint-plugin-graphql](https://github.com/apollostack/eslint-plugin-graphql). However, strings are inconvenient to manipulate, if you are trying to do things like add extra fields, merge multiple queries together, or other interesting stuff.\n\nThat's where this package comes in - it lets you write your queries with [ES2015 template literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals) and compile them into an AST with the `gql` tag.\n\n#### Caching parse results\n\nThis package only has one feature - it caches previous parse results in a simple dictionary. This means that if you call the tag on the same query multiple times, it doesn't waste time parsing it again. It also means you can use `===` to compare queries to check if they are identical.\n\n### Babel preprocessing\n\nGraphQL queries can be compiled at build time using [babel-plugin-graphql-tag](https://github.com/gajus/babel-plugin-graphql-tag). Pre-compiling queries decreases the script initialization time and reduces the bundle size by potentially removing the need for `graphql-tag` at runtime.\n\n#### TypeScript\nTry this custom transformer to pre-compile your GraphQL queries in TypeScript: [ts-transform-graphql-tag](https://github.com/firede/ts-transform-graphql-tag).\n\n#### React Native, Next.js\n\nAdditionally, in certain situations, preprocessing queries via the webpack loader is not possible. [babel-plugin-inline-import-graphql-ast](https://www.npmjs.com/package/babel-plugin-inline-import-graphql-ast) will allow one to import graphql files directly into your JavaScript by preprocessing GraphQL queries into ASTs at compile-time.\n\nE.g.:\n```javascript\nimport myImportedQuery from './productsQuery.graphql'\n\nclass ProductsPage extends React.Component {\n  ...\n}\n```\n\n#### Create-React-App\n\n`create-react-app@2.0.0` will [support the ability to preprocess queries](https://github.com/facebook/create-react-app/pull/3909) using `graphql-tag/loader` without the need to eject.\n\nIf you're using an older version of `create-react-app`, check out [react-app-rewire-inline-import-graphql-ast](https://www.npmjs.com/package/react-app-rewire-inline-import-graphql-ast) to preprocess queries without needing to eject.\n\n### Webpack preprocessing with `graphql-tag/loader`\n\nThis package also includes a [webpack loader](https://webpack.js.org/concepts/loaders). There are many benefits over this approach, which saves GraphQL ASTs processing time on client-side and enable queries to be separated from script over `.graphql` files.\n\n```js\nloaders: [\n  {\n    test: /\\.(graphql|gql)$/,\n    exclude: /node_modules/,\n    loader: 'graphql-tag/loader'\n  }\n]\n```\n\nthen:\n\n```js\nimport query from './query.graphql';\n\nconsole.log(query);\n// {\n//   \"kind\": \"Document\",\n// ...\n```\n\nTesting environments that don't support Webpack require additional configuration. For [Jest](https://facebook.github.io/jest/) use [jest-transform-graphql](https://github.com/remind101/jest-transform-graphql).\n\n#### Support for multiple operations\n\nWith the webpack loader, you can also import operations by name:\n\nIn a file called `query.gql`:\n```graphql\nquery MyQuery1 {\n  ...\n}\n\nquery MyQuery2 {\n  ...\n}\n```\n\nAnd in your JavaScript:\n```javascript\nimport { MyQuery1, MyQuery2 } from 'query.gql'\n```\n\n### Warnings\n\nThis package will emit a warning if you have multiple fragments of the same name. You can disable this with:\n\n```js\nimport { disableFragmentWarnings } from 'graphql-tag';\n\ndisableFragmentWarnings()\n```\n\n### Experimental Fragment Variables\n\nThis package exports an `experimentalFragmentVariables` flag that allows you to use experimental support for [parameterized fragments](https://github.com/facebook/graphql/issues/204).\n\nYou can enable / disable this with:\n```js\nimport { enableExperimentalFragmentVariables, disableExperimentalFragmentVariables } from 'graphql-tag';\n```\n\nEnabling this feature allows you declare documents of the form\n```graphql\nfragment SomeFragment ($arg: String!) on SomeType {\n  someField\n}\n```\n\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/apollostack/graphql-tag.git"
  },
  "scripts": {
    "bundle": "rollup -c && cp src/index.js.flow lib/graphql-tag.umd.js.flow",
    "prepublish": "npm run bundle",
    "test": "mocha test/graphql.js test/graphql-v0.12.js && tav --ci --compat"
  },
  "version": "2.9.1"
}
